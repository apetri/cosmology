# Makefile.in generated by automake 1.9.6 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



#LIBDNSTD_PATH =/home/dcoss/tmp/blah/libdnstd/install
#LIBMYGL_PATH = /home/dcoss/tmp/blah/libmygl/install
#FFTW_PATH = $(HOME)/opt/fftw
#MYINCLUDES = -I $(FFTW_PATH)/include/ -I $(LIBMYGL_PATH)/include/  -I $(LIBDNSTD_PATH)/include/

srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/mycosmo
pkglibdir = $(libdir)/mycosmo
pkgincludedir = $(includedir)/mycosmo
top_builddir = ..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = ray_trace_ellipse$(EXEEXT) flatten$(EXEEXT) \
	physcalc$(EXEEXT) makecluster$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	physcalc.lex.cpp physcalc.yacc.cpp physcalc.yacc.h
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_flatten_OBJECTS = flatten-flattenmain.$(OBJEXT) \
	flatten-flatten.$(OBJEXT)
flatten_OBJECTS = $(am_flatten_OBJECTS)
flatten_DEPENDENCIES =
am_makecluster_OBJECTS = makecluster-makecluster.$(OBJEXT) \
	makecluster-create_cluster.$(OBJEXT)
makecluster_OBJECTS = $(am_makecluster_OBJECTS)
makecluster_DEPENDENCIES =
am_physcalc_OBJECTS = physcalc-physcalc.lex.$(OBJEXT) \
	physcalc-physcalc.yacc.$(OBJEXT)
physcalc_OBJECTS = $(am_physcalc_OBJECTS)
physcalc_DEPENDENCIES =
am_ray_trace_ellipse_OBJECTS =  \
	ray_trace_ellipse-ray_trace_ellipse.$(OBJEXT)
ray_trace_ellipse_OBJECTS = $(am_ray_trace_ellipse_OBJECTS)
ray_trace_ellipse_DEPENDENCIES =
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
LEXCOMPILE = $(LEX) $(LFLAGS) $(AM_LFLAGS)
YACCCOMPILE = $(YACC) $(YFLAGS) $(AM_YFLAGS)
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(flatten_SOURCES) $(makecluster_SOURCES) \
	$(physcalc_SOURCES) $(ray_trace_ellipse_SOURCES)
DIST_SOURCES = $(flatten_SOURCES) $(makecluster_SOURCES) \
	$(physcalc_SOURCES) $(ray_trace_ellipse_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/dcoss/tmp/blah/c/missing --run aclocal-1.9
ALLOCA = 
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/dcoss/tmp/blah/c/missing --run tar
AUTOCONF = ${SHELL} /home/dcoss/tmp/blah/c/missing --run autoconf
AUTOHEADER = ${SHELL} /home/dcoss/tmp/blah/c/missing --run autoheader
AUTOMAKE = ${SHELL} /home/dcoss/tmp/blah/c/missing --run automake-1.9
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
FFTW3_PATH = /home/dcoss/opt/fftw
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LEX = flex
LEXLIB = -lfl
LEX_OUTPUT_ROOT = lex.yy
LIBDNSTD_PATH = /home/dcoss/tmp/blah/libdnstd/install
LIBMYGL_PATH = /home/dcoss/tmp/blah/libmygl/install
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/dcoss/tmp/blah/c/missing --run makeinfo
OBJEXT = o
PACKAGE = mycosmo
PACKAGE_BUGREPORT = david@davecoss.com
PACKAGE_NAME = mycosmo
PACKAGE_STRING = mycosmo 1.0
PACKAGE_TARNAME = mycosmo
PACKAGE_VERSION = 1.0
PATH_SEPARATOR = :
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 1.0
YACC = bison -y
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_STRIP = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
datadir = ${prefix}/share
exec_prefix = ${prefix}
host_alias = 
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/dcoss/tmp/blah/c/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
ray_trace_ellipse_SOURCES = ray_trace_ellipse.cpp
ray_trace_ellipse_CPPFLAGS = -I$(LIBMYGL_PATH)/include/  -I$(LIBDNSTD_PATH)/include/
ray_trace_ellipse_LDFLAGS = -L${LIBMYGL_PATH}/lib -L${LIBDNSTD_PATH}/lib
ray_trace_ellipse_LDADD = -lmygl -ldnstd
flatten_SOURCES = flattenmain.cpp flatten.cpp
flatten_CPPFLAGS = -I$(LIBMYGL_PATH)/include/  -I$(LIBDNSTD_PATH)/include/
flatten_LDFLAGS = -L${LIBMYGL_PATH}/lib -L${LIBDNSTD_PATH}/lib
flatten_LDADD = -lmygl -ldnstd
AM_YFLAGS = -d
physcalc_SOURCES = physcalc.lex.lpp physcalc.yacc.ypp
physcalc_CPPFLAGS = -I$(LIBMYGL_PATH)/include/  -I$(LIBDNSTD_PATH)/include/ -I${FFTW3_PATH}/include
physcalc_LDFLAGS = -L${LIBMYGL_PATH}/lib -L${LIBDNSTD_PATH}/lib -L${FFTW3_PATH}/lib
physcalc_LDADD = -lmygl -ldnstd -lfftw3 
makecluster_SOURCES = makecluster.cpp create_cluster.cpp
makecluster_CPPFLAGS = -I$(LIBMYGL_PATH)/include/  -I$(LIBDNSTD_PATH)/include/
makecluster_LDFLAGS = -L${LIBMYGL_PATH}/lib -L${LIBDNSTD_PATH}/lib
makecluster_LDADD = -lmygl -ldnstd 
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lpp .o .obj .ypp
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
flatten$(EXEEXT): $(flatten_OBJECTS) $(flatten_DEPENDENCIES) 
	@rm -f flatten$(EXEEXT)
	$(CXXLINK) $(flatten_LDFLAGS) $(flatten_OBJECTS) $(flatten_LDADD) $(LIBS)
makecluster$(EXEEXT): $(makecluster_OBJECTS) $(makecluster_DEPENDENCIES) 
	@rm -f makecluster$(EXEEXT)
	$(CXXLINK) $(makecluster_LDFLAGS) $(makecluster_OBJECTS) $(makecluster_LDADD) $(LIBS)
physcalc.yacc.h: physcalc.yacc.cpp
	@if test ! -f $@; then \
	  rm -f physcalc.yacc.cpp; \
	  $(MAKE) physcalc.yacc.cpp; \
	else :; fi
physcalc$(EXEEXT): $(physcalc_OBJECTS) $(physcalc_DEPENDENCIES) 
	@rm -f physcalc$(EXEEXT)
	$(CXXLINK) $(physcalc_LDFLAGS) $(physcalc_OBJECTS) $(physcalc_LDADD) $(LIBS)
ray_trace_ellipse$(EXEEXT): $(ray_trace_ellipse_OBJECTS) $(ray_trace_ellipse_DEPENDENCIES) 
	@rm -f ray_trace_ellipse$(EXEEXT)
	$(CXXLINK) $(ray_trace_ellipse_LDFLAGS) $(ray_trace_ellipse_OBJECTS) $(ray_trace_ellipse_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/flatten-flatten.Po
include ./$(DEPDIR)/flatten-flattenmain.Po
include ./$(DEPDIR)/makecluster-create_cluster.Po
include ./$(DEPDIR)/makecluster-makecluster.Po
include ./$(DEPDIR)/physcalc-physcalc.lex.Po
include ./$(DEPDIR)/physcalc-physcalc.yacc.Po
include ./$(DEPDIR)/ray_trace_ellipse-ray_trace_ellipse.Po

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

flatten-flattenmain.o: flattenmain.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(flatten_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT flatten-flattenmain.o -MD -MP -MF "$(DEPDIR)/flatten-flattenmain.Tpo" -c -o flatten-flattenmain.o `test -f 'flattenmain.cpp' || echo '$(srcdir)/'`flattenmain.cpp; \
	then mv -f "$(DEPDIR)/flatten-flattenmain.Tpo" "$(DEPDIR)/flatten-flattenmain.Po"; else rm -f "$(DEPDIR)/flatten-flattenmain.Tpo"; exit 1; fi
#	source='flattenmain.cpp' object='flatten-flattenmain.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(flatten_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o flatten-flattenmain.o `test -f 'flattenmain.cpp' || echo '$(srcdir)/'`flattenmain.cpp

flatten-flattenmain.obj: flattenmain.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(flatten_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT flatten-flattenmain.obj -MD -MP -MF "$(DEPDIR)/flatten-flattenmain.Tpo" -c -o flatten-flattenmain.obj `if test -f 'flattenmain.cpp'; then $(CYGPATH_W) 'flattenmain.cpp'; else $(CYGPATH_W) '$(srcdir)/flattenmain.cpp'; fi`; \
	then mv -f "$(DEPDIR)/flatten-flattenmain.Tpo" "$(DEPDIR)/flatten-flattenmain.Po"; else rm -f "$(DEPDIR)/flatten-flattenmain.Tpo"; exit 1; fi
#	source='flattenmain.cpp' object='flatten-flattenmain.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(flatten_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o flatten-flattenmain.obj `if test -f 'flattenmain.cpp'; then $(CYGPATH_W) 'flattenmain.cpp'; else $(CYGPATH_W) '$(srcdir)/flattenmain.cpp'; fi`

flatten-flatten.o: flatten.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(flatten_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT flatten-flatten.o -MD -MP -MF "$(DEPDIR)/flatten-flatten.Tpo" -c -o flatten-flatten.o `test -f 'flatten.cpp' || echo '$(srcdir)/'`flatten.cpp; \
	then mv -f "$(DEPDIR)/flatten-flatten.Tpo" "$(DEPDIR)/flatten-flatten.Po"; else rm -f "$(DEPDIR)/flatten-flatten.Tpo"; exit 1; fi
#	source='flatten.cpp' object='flatten-flatten.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(flatten_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o flatten-flatten.o `test -f 'flatten.cpp' || echo '$(srcdir)/'`flatten.cpp

flatten-flatten.obj: flatten.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(flatten_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT flatten-flatten.obj -MD -MP -MF "$(DEPDIR)/flatten-flatten.Tpo" -c -o flatten-flatten.obj `if test -f 'flatten.cpp'; then $(CYGPATH_W) 'flatten.cpp'; else $(CYGPATH_W) '$(srcdir)/flatten.cpp'; fi`; \
	then mv -f "$(DEPDIR)/flatten-flatten.Tpo" "$(DEPDIR)/flatten-flatten.Po"; else rm -f "$(DEPDIR)/flatten-flatten.Tpo"; exit 1; fi
#	source='flatten.cpp' object='flatten-flatten.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(flatten_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o flatten-flatten.obj `if test -f 'flatten.cpp'; then $(CYGPATH_W) 'flatten.cpp'; else $(CYGPATH_W) '$(srcdir)/flatten.cpp'; fi`

makecluster-makecluster.o: makecluster.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(makecluster_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT makecluster-makecluster.o -MD -MP -MF "$(DEPDIR)/makecluster-makecluster.Tpo" -c -o makecluster-makecluster.o `test -f 'makecluster.cpp' || echo '$(srcdir)/'`makecluster.cpp; \
	then mv -f "$(DEPDIR)/makecluster-makecluster.Tpo" "$(DEPDIR)/makecluster-makecluster.Po"; else rm -f "$(DEPDIR)/makecluster-makecluster.Tpo"; exit 1; fi
#	source='makecluster.cpp' object='makecluster-makecluster.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(makecluster_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o makecluster-makecluster.o `test -f 'makecluster.cpp' || echo '$(srcdir)/'`makecluster.cpp

makecluster-makecluster.obj: makecluster.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(makecluster_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT makecluster-makecluster.obj -MD -MP -MF "$(DEPDIR)/makecluster-makecluster.Tpo" -c -o makecluster-makecluster.obj `if test -f 'makecluster.cpp'; then $(CYGPATH_W) 'makecluster.cpp'; else $(CYGPATH_W) '$(srcdir)/makecluster.cpp'; fi`; \
	then mv -f "$(DEPDIR)/makecluster-makecluster.Tpo" "$(DEPDIR)/makecluster-makecluster.Po"; else rm -f "$(DEPDIR)/makecluster-makecluster.Tpo"; exit 1; fi
#	source='makecluster.cpp' object='makecluster-makecluster.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(makecluster_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o makecluster-makecluster.obj `if test -f 'makecluster.cpp'; then $(CYGPATH_W) 'makecluster.cpp'; else $(CYGPATH_W) '$(srcdir)/makecluster.cpp'; fi`

makecluster-create_cluster.o: create_cluster.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(makecluster_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT makecluster-create_cluster.o -MD -MP -MF "$(DEPDIR)/makecluster-create_cluster.Tpo" -c -o makecluster-create_cluster.o `test -f 'create_cluster.cpp' || echo '$(srcdir)/'`create_cluster.cpp; \
	then mv -f "$(DEPDIR)/makecluster-create_cluster.Tpo" "$(DEPDIR)/makecluster-create_cluster.Po"; else rm -f "$(DEPDIR)/makecluster-create_cluster.Tpo"; exit 1; fi
#	source='create_cluster.cpp' object='makecluster-create_cluster.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(makecluster_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o makecluster-create_cluster.o `test -f 'create_cluster.cpp' || echo '$(srcdir)/'`create_cluster.cpp

makecluster-create_cluster.obj: create_cluster.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(makecluster_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT makecluster-create_cluster.obj -MD -MP -MF "$(DEPDIR)/makecluster-create_cluster.Tpo" -c -o makecluster-create_cluster.obj `if test -f 'create_cluster.cpp'; then $(CYGPATH_W) 'create_cluster.cpp'; else $(CYGPATH_W) '$(srcdir)/create_cluster.cpp'; fi`; \
	then mv -f "$(DEPDIR)/makecluster-create_cluster.Tpo" "$(DEPDIR)/makecluster-create_cluster.Po"; else rm -f "$(DEPDIR)/makecluster-create_cluster.Tpo"; exit 1; fi
#	source='create_cluster.cpp' object='makecluster-create_cluster.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(makecluster_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o makecluster-create_cluster.obj `if test -f 'create_cluster.cpp'; then $(CYGPATH_W) 'create_cluster.cpp'; else $(CYGPATH_W) '$(srcdir)/create_cluster.cpp'; fi`

physcalc-physcalc.lex.o: physcalc.lex.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(physcalc_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT physcalc-physcalc.lex.o -MD -MP -MF "$(DEPDIR)/physcalc-physcalc.lex.Tpo" -c -o physcalc-physcalc.lex.o `test -f 'physcalc.lex.cpp' || echo '$(srcdir)/'`physcalc.lex.cpp; \
	then mv -f "$(DEPDIR)/physcalc-physcalc.lex.Tpo" "$(DEPDIR)/physcalc-physcalc.lex.Po"; else rm -f "$(DEPDIR)/physcalc-physcalc.lex.Tpo"; exit 1; fi
#	source='physcalc.lex.cpp' object='physcalc-physcalc.lex.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(physcalc_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o physcalc-physcalc.lex.o `test -f 'physcalc.lex.cpp' || echo '$(srcdir)/'`physcalc.lex.cpp

physcalc-physcalc.lex.obj: physcalc.lex.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(physcalc_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT physcalc-physcalc.lex.obj -MD -MP -MF "$(DEPDIR)/physcalc-physcalc.lex.Tpo" -c -o physcalc-physcalc.lex.obj `if test -f 'physcalc.lex.cpp'; then $(CYGPATH_W) 'physcalc.lex.cpp'; else $(CYGPATH_W) '$(srcdir)/physcalc.lex.cpp'; fi`; \
	then mv -f "$(DEPDIR)/physcalc-physcalc.lex.Tpo" "$(DEPDIR)/physcalc-physcalc.lex.Po"; else rm -f "$(DEPDIR)/physcalc-physcalc.lex.Tpo"; exit 1; fi
#	source='physcalc.lex.cpp' object='physcalc-physcalc.lex.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(physcalc_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o physcalc-physcalc.lex.obj `if test -f 'physcalc.lex.cpp'; then $(CYGPATH_W) 'physcalc.lex.cpp'; else $(CYGPATH_W) '$(srcdir)/physcalc.lex.cpp'; fi`

physcalc-physcalc.yacc.o: physcalc.yacc.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(physcalc_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT physcalc-physcalc.yacc.o -MD -MP -MF "$(DEPDIR)/physcalc-physcalc.yacc.Tpo" -c -o physcalc-physcalc.yacc.o `test -f 'physcalc.yacc.cpp' || echo '$(srcdir)/'`physcalc.yacc.cpp; \
	then mv -f "$(DEPDIR)/physcalc-physcalc.yacc.Tpo" "$(DEPDIR)/physcalc-physcalc.yacc.Po"; else rm -f "$(DEPDIR)/physcalc-physcalc.yacc.Tpo"; exit 1; fi
#	source='physcalc.yacc.cpp' object='physcalc-physcalc.yacc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(physcalc_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o physcalc-physcalc.yacc.o `test -f 'physcalc.yacc.cpp' || echo '$(srcdir)/'`physcalc.yacc.cpp

physcalc-physcalc.yacc.obj: physcalc.yacc.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(physcalc_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT physcalc-physcalc.yacc.obj -MD -MP -MF "$(DEPDIR)/physcalc-physcalc.yacc.Tpo" -c -o physcalc-physcalc.yacc.obj `if test -f 'physcalc.yacc.cpp'; then $(CYGPATH_W) 'physcalc.yacc.cpp'; else $(CYGPATH_W) '$(srcdir)/physcalc.yacc.cpp'; fi`; \
	then mv -f "$(DEPDIR)/physcalc-physcalc.yacc.Tpo" "$(DEPDIR)/physcalc-physcalc.yacc.Po"; else rm -f "$(DEPDIR)/physcalc-physcalc.yacc.Tpo"; exit 1; fi
#	source='physcalc.yacc.cpp' object='physcalc-physcalc.yacc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(physcalc_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o physcalc-physcalc.yacc.obj `if test -f 'physcalc.yacc.cpp'; then $(CYGPATH_W) 'physcalc.yacc.cpp'; else $(CYGPATH_W) '$(srcdir)/physcalc.yacc.cpp'; fi`

ray_trace_ellipse-ray_trace_ellipse.o: ray_trace_ellipse.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ray_trace_ellipse_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ray_trace_ellipse-ray_trace_ellipse.o -MD -MP -MF "$(DEPDIR)/ray_trace_ellipse-ray_trace_ellipse.Tpo" -c -o ray_trace_ellipse-ray_trace_ellipse.o `test -f 'ray_trace_ellipse.cpp' || echo '$(srcdir)/'`ray_trace_ellipse.cpp; \
	then mv -f "$(DEPDIR)/ray_trace_ellipse-ray_trace_ellipse.Tpo" "$(DEPDIR)/ray_trace_ellipse-ray_trace_ellipse.Po"; else rm -f "$(DEPDIR)/ray_trace_ellipse-ray_trace_ellipse.Tpo"; exit 1; fi
#	source='ray_trace_ellipse.cpp' object='ray_trace_ellipse-ray_trace_ellipse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ray_trace_ellipse_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ray_trace_ellipse-ray_trace_ellipse.o `test -f 'ray_trace_ellipse.cpp' || echo '$(srcdir)/'`ray_trace_ellipse.cpp

ray_trace_ellipse-ray_trace_ellipse.obj: ray_trace_ellipse.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ray_trace_ellipse_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ray_trace_ellipse-ray_trace_ellipse.obj -MD -MP -MF "$(DEPDIR)/ray_trace_ellipse-ray_trace_ellipse.Tpo" -c -o ray_trace_ellipse-ray_trace_ellipse.obj `if test -f 'ray_trace_ellipse.cpp'; then $(CYGPATH_W) 'ray_trace_ellipse.cpp'; else $(CYGPATH_W) '$(srcdir)/ray_trace_ellipse.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ray_trace_ellipse-ray_trace_ellipse.Tpo" "$(DEPDIR)/ray_trace_ellipse-ray_trace_ellipse.Po"; else rm -f "$(DEPDIR)/ray_trace_ellipse-ray_trace_ellipse.Tpo"; exit 1; fi
#	source='ray_trace_ellipse.cpp' object='ray_trace_ellipse-ray_trace_ellipse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(ray_trace_ellipse_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ray_trace_ellipse-ray_trace_ellipse.obj `if test -f 'ray_trace_ellipse.cpp'; then $(CYGPATH_W) 'ray_trace_ellipse.cpp'; else $(CYGPATH_W) '$(srcdir)/ray_trace_ellipse.cpp'; fi`

.lpp.cpp:
	$(LEXCOMPILE) $<
	sed '/^#/ s|$(LEX_OUTPUT_ROOT)\.c|$@|' $(LEX_OUTPUT_ROOT).c >$@
	rm -f $(LEX_OUTPUT_ROOT).c

.ypp.cpp:
	$(YACCCOMPILE) $<
	if test -f y.tab.h; then \
	  to=`echo "$*_H" | sed \
                -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/' \
                -e 's/[^ABCDEFGHIJKLMNOPQRSTUVWXYZ]/_/g'`; \
	  sed -e "/^#/!b" -e "s/Y_TAB_H/$$to/g" -e "s|y\.tab\.h|$*.h|" \
            y.tab.h >$*.ht; \
	  rm -f y.tab.h; \
	  if cmp -s $*.ht $*.h; then \
	    rm -f $*.ht ;\
	  else \
	    mv $*.ht $*.h; \
	  fi; \
	fi
	if test -f y.output; then \
	  mv y.output $*.output; \
	fi
	sed '/^#/ s|y\.tab\.c|$@|' y.tab.c >$@t && mv $@t $@
	rm -f y.tab.c
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-rm -f physcalc.lex.cpp
	-rm -f physcalc.yacc.cpp
	-rm -f physcalc.yacc.h
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-exec install-exec-am \
	install-info install-info-am install-man install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
