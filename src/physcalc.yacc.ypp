%{
#include <math.h>  /* For math functions, cos(), sin(), etc.  */
#include <stdio.h>
#include <string.h>
#include <complex>
#include <dirent.h>
#include "symrec.h"
#include "functions.h"

  static const char* PROMPT_STRING = ">";
  class DavidException;
  int yylex (void);
  extern char* yytext;
  void yyerror (char const *);
  void do_ls(const char *path);	
  void print_help(const char *keyword);
  void do_funct(symrec* fnct,  struct calcval result);
  void do_funct(symrec* fnct, symrec* param, struct calcval result);
  void do_funct(symrec* fnct, struct calcval param, struct calcval result);
  void do_funct2(symrec* fnct, symrec* param, symrec* param2, struct calcval result);
  int update_vars(symrec* var);
  void handle_plane(symrec *rec,double& i, double& j, struct calcval);
  struct calcval ans;
  void print_complex(struct calcval);

 %}
%union {
  struct calcval val;   /* For returning numbers.  */
  struct symrec  *tptr;   /* For returning symbol-table pointers.  */
}
%token <val>  NUM        /* Simple double precision number.  */
%token <tptr> VAR FNCT 
%token IMAG EXIT
%type  <val>  exp
%left ANS
%right '='
%left '-' '+'
%left '*' '/'
%left NEG     /* negation--unary minus */
%right '^'    /* exponentiation */

%% /* The grammar follows.  */
input:   input stmt
        | /* NULL */
     ;
     
     stmt:
               ';'
               | EXIT ';' {YYACCEPT;}
               | exp ';'   { print_complex($1); ans = $1;}
               | error ';' { yyerrok;  printf("%s",PROMPT_STRING);         }
               ;

exp:          NUM                 { $$ = $1;yylval.val = $1;}
             | NUM IMAG { yylval.val.re = 0;yylval.val.im = $1.re;$$ = yylval.val;}
             | VAR                { $$.re = $1->value.var[0];$$.im = $1->value.var[1];}
             | ANS                { $$ = ans;             } 
             | VAR '=' exp        { $$ = $3; $1->value.var[0] = $3.re;$1->value.var[1]= $3.im; }
	| FNCT '(' ')' {do_funct($1,ans); $$ = ans;}
             | FNCT '(' VAR ')'   { do_funct($1,$3,ans); $$ = ans;}
             | FNCT '(' exp ')'   { do_funct($1,$3,ans); $$ = ans;}
             | FNCT '(' VAR ',' VAR ')' { do_funct2($1, $3, $5,ans); $$ = ans;}
             | exp '+' exp        { $$.re = $1.re + $3.re;$$.im = $1.im+$3.im;}
             | exp '-' exp        { $$.re = $1.re - $3.re;$$.im = $1.im-$3.im;}
             | exp '*' exp        { $$.re = $1.re * $3.re-$1.im*$3.im;$$.im = $1.re*$3.im+$1.im*$3.re;}
             | exp '/' exp        { $$.re = $1.re / $3.re; $$.im = $1.im/$3.re;}
             | exp '%' exp        { $$.re = (int)$1.re % (int)$3.re;}
             | '-' exp  %prec NEG { $$.re = -$2.re;$$.im = -$2.im;         }
             | exp '^' exp        { $$.re = pow ($1.re, $3.re);$$.im=0; }
             | '(' exp ')'        { $$ = $2;                         }
             | VAR '[' exp ',' exp ']' {handle_plane($1,$3.re,$5.re,ans);$$ = ans;} 
            ;
     /* End of grammar.  */
%%

symrec *
     putsym (char const *sym_name, int sym_type)
     {
       symrec *ptr;
       ptr = (symrec *) malloc (sizeof (symrec));
       ptr->name = (char *) malloc (strlen (sym_name) + 1);
       strcpy (ptr->name,sym_name);
       ptr->type = sym_type;
       ptr->value.var[0] = 0; /* Set value to 0 even if fctn.  */
       ptr->value.var[1] = 0;
       ptr->next = (struct symrec *)sym_table;
       sym_table = ptr;
       return ptr;
     }
     
     symrec *
     getsym (char const *sym_name)
     {
       symrec *ptr;
       for (ptr = sym_table; ptr != (symrec *) 0;
            ptr = (symrec *)ptr->next)
         if (strcmp (ptr->name,sym_name) == 0)
           return ptr;
       return 0;
     }

#include <ctype.h>
#if 0     
     int
     yylex (void)
     {
       int c;

       /* Ignore white space, get first nonwhite character.  */
       while ((c = getchar ()) == ' ' || c == '\t');
     
       if (c == EOF)
         return 0;
     
       /* Char starts a number => parse the number.         */
       if (c == '.' || isdigit (c))
         {
           ungetc (c, stdin);
           scanf ("%lf", &yylval.val[0]);
           return NUM;
         }
     
       /* Char starts an identifier => read the name.       */
       if (isalpha (c))
         {
           symrec *s;
           static char *symbuf = 0;
           static int length = 0;
           int i;
     
           /* Initially make the buffer long enough
              for a 40-character symbol name.  */
           if (length == 0)
             length = 40, symbuf = (char *)malloc (length + 1);
     
           i = 0;
           do
             {
               /* If buffer is full, make it bigger.        */
               if (i == length)
                 {
                   length *= 2;
                   symbuf = (char *) realloc (symbuf, length + 1);
                 }
               /* Add this character to the buffer.         */
               symbuf[i++] = c;
               /* Get another character.                    */
               c = getchar ();
             }
           while (isalnum (c));
     
           ungetc (c, stdin);
           symbuf[i] = '\0';
     
           s = getsym (symbuf);
           if (s == 0)
             s = putsym (symbuf, VAR);
           yylval.tptr = s;
           return s->type;
         }
     
       /* Any other character is a token by itself.        */
       return c;
     }
#endif

/* Called by yyparse on error.  */
     void
     yyerror (char const *s)
     {
       printf ("%s: %s\n", s,yytext);
     }
     
     struct init
     {
       char const *fname;
       double (*fnct) (double);
       void (*v_c_fnct)(const char*);
     };
     
     struct init const arith_fncts[] =
     {
       "sin",  sin,0,
       "cos",  cos,0,
       "tan",  tan,0,
       "asin", asin,0,
       "acos", acos,0,
       "atan", atan,0,
       "ln",   log,0,
       "exp",  exp,0,
       "sqrt", sqrt,0,
       "floor", floor,0,
       "ceil", ceil,0,
       0, 0, 0
     };

	struct init const other_fncts[] = 
	{
		"help",0,print_help,
		"ls",0,do_ls,
		0,0,0
	};
     
     /* The symbol table: a chain of `struct symrec'.  */
     symrec *sym_table;
     
/**
 * Initialize function table
 */
     void
     init_table (void)
     {
       int i;
       symrec *ptr;
       const struct init *curr = arith_fncts;

	i = 0;
       while (curr[i].fname != 0)
         {
           ptr = putsym (curr[i].fname, FNCT);
	   if(curr[i].fnct != 0)
	           ptr->value.fnctptr =	 curr[i].fnct;
	   else if(curr[i].v_c_fnct != 0)
	          ptr->value.v_c_fnctptr =	 curr[i].v_c_fnct;
           ptr->plane_fnctptr = NULL;
	

           i++;
	   if(curr == arith_fncts && curr[i].fname == 0)
	   {
		curr = other_fncts;i = 0;
	   }
         }

       putsym("print",FNCT)->plane_fnctptr = print_plane;
       putsym("clear",FNCT)->plane_fnctptr = clear_plane;
       putsym("add",FNCT)->plane_fnctptr = add_planes;
       putsym("subtract",FNCT)->plane_fnctptr = subtract_planes;
       putsym("multiply",FNCT)->plane_fnctptr = multiply_planes;
       putsym("open",FNCT)->plane_fnctptr = open_plane;
       putsym("save",FNCT)->plane_fnctptr = save_plane;
       putsym("copy",FNCT)->plane_fnctptr = copy_plane;
       putsym("fourier",FNCT)->plane_fnctptr = fourier_plane;
       putsym("ifourier",FNCT)->plane_fnctptr = ifourier_plane;
     }
     
     int
     main (void)
     {
       symrec *funct;
       init_table ();
       printf("\n");
       printf("Welcome! To exit, type quit.\nAll statements must end with a semicolon.\n%s",PROMPT_STRING);
       yyparse();
       printf("Good bye.\n");
       return 0;
     }

void do_funct(symrec *rec, struct calcval param, struct calcval result)
{
  if(rec == NULL || rec->plane_fnctptr != NULL)
    return;
    
  result.re = (*(rec->value.fnctptr))(param.re);      
  result.im = 0.0;
}

void do_funct(symrec *rec, symrec *param, struct calcval result)
{
  if(rec == NULL || param == NULL)
    return;

  if(rec->plane_fnctptr != NULL)
    {
      symrec* newrec = (*rec->plane_fnctptr)(&param,1);
      if(newrec != NULL)
	{
	  newrec->next = (struct symrec *)sym_table;
	  sym_table = newrec;
	}
       return;
    }

  if(rec->value.v_c_fnctptr != 0)
	return (*rec->value.v_c_fnctptr)(param->name);

  result.re = (*(rec->value.fnctptr))(param->value.var[0]);
  result.im = 0.0;
}


void do_funct2(symrec* rec, symrec* param, symrec* param2, struct calcval result)
{
  if(rec == NULL || param == NULL || param2 == NULL)
    return;
  if(rec->plane_fnctptr == NULL)
    return;

  symrec* params[] = {param,param2};
  symrec* newrec = (*rec->plane_fnctptr)(params,2);
  if(newrec != NULL)
    {
      newrec->next = (struct symrec *)sym_table;
      sym_table = newrec;
    }

}

void handle_plane(symrec *rec,double& i, double& j, struct calcval result)
{
  rec->isPlane = true;
  if(rec->value.planeptr == NULL)
    {
      rec->value.planeptr = create_plane(i,j); 
      return;
    }
  try{
    const Double& complex = rec->value.planeptr->getValue((int)i,(int)j);
    result.re = complex.getValue(0);
    result.im = complex.getValue(1);
  }
  catch(DavidException de)
    {
      std::cout << de.what() << std::endl;
    }
}

void print_complex(struct calcval cnumber)
{
  using namespace std;
  cout << "\tans: ";
  if(cnumber.im != 0)
    {
      math::Complex buff(cnumber.re,cnumber.im);
      cout << buff;
    }
  else
    cout << cnumber.re;
  cout <<   endl << ">";
}

void do_funct(symrec* fnct,  struct calcval result)
{
	if(fnct == NULL)
		return;
	if(fnct->type != FNCT)
		return;
	if(fnct->value.v_c_fnctptr == 0)
		return;
	(*fnct->value.v_c_fnctptr)(NULL);
}

void print_help(const char *keyword)
{
	if(keyword == NULL || strcmp(keyword,"print") == 0)
		printf("print -- summarizes data contined in the specified variable.\n");
	if(keyword == NULL || strcmp(keyword,"clear") == 0)
		printf("clear -- clears plane variable contents. \n");
	if(keyword == NULL || strcmp(keyword,"add") == 0)
		printf("add -- adds two planes. \n\tUsage: add(A,B)\n\t\t A <- A+B\n");
	if(keyword == NULL || strcmp(keyword,"substract") == 0)
		printf("substracts -- subtracts two planes. \n\tUsage: subtract(A,B)\n\t\t A <- A-B\n");
	if(keyword == NULL || strcmp(keyword,"multiply") == 0)
		printf("add -- multiply two planes. \n\tUsage: multiply(A,B)\n\t\t A <- A*B\n");
	if(keyword == NULL || strcmp(keyword,"open") == 0)
		printf("open -- opens a plane and stores it in the specified variable.\n\tUsage: open(A,filename);\n");
	if(keyword == NULL || strcmp(keyword,"save") == 0)
		printf("save -- saves a plane save the specified file.\n\tUsage: save(A,filename);\n");
	if(keyword == NULL || strcmp(keyword,"copy") == 0)
		printf("copy -- copies a plane.\n\tUsage: copy(A,B)\n\t\t B <- A\n");
	if(keyword == NULL || strcmp(keyword,"fourier") == 0)
		printf("fourier -- fourier transforms a plane. Performed in place.\nUsage: fourier(A)\n\t\tA <- F(A)\n");
	if(keyword == NULL || strcmp(keyword,"ifourier") == 0)
		printf("ifourier -- inverse fourier transforms a plane. Performed in place.\nUsage: ifourier(A)\n\t\tA <- F^-1 (A)\n");
	
}

void do_ls(const char *path)
{
	DIR *dp;
	struct dirent *ep;
	
	if(path == NULL)
		dp = opendir ("./");
	else
		dp = opendir(path);
	if (dp != NULL)
	{
		while (ep = readdir (dp))
			if(ep->d_name && ep->d_name[0] != '.')
				puts (ep->d_name);
		closedir (dp);
	}
	else
		printf ("Couldn't open the directory\n");

	
}
