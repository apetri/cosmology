/**
 * 
 * This file is part of physcalc, an interactive calculator utility
 * designed to carry out lensing calculations and to manipulate plane
 * data structures.
 *
 * This file contains parser code. It is meant to be used with
 * yacc (specificly GNU bison). For an excellent "A Compact Guide
 * to Lex & Yacc" by Tom Niemann" available at epaperpress.com. 
 * Portions of source code from that paper are used here with 
 * permission given in the Preface (page 3).
 * 
 * Copyright 2007, 2010 David Coss, PhD
 *
 * physcalc is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * physcalc is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with physcalc.  If not, see <http://www.gnu.org/licenses/>.
 */
%{
#include "symrec.h"
#include "functions.h"
#include "physcalc.h"
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <math.h>  /* For math functions, cos(), sin(), etc.  */
#include <stdio.h>
#include <string.h>
#include <complex>
#include <dirent.h>

  class DavidException;
  int yylex (void);
  extern void yyrestart(FILE *);
  extern char* yytext;
  void yyerror (char const *);
  extern int PHYSCALC_is_interactive;
  const char *radices[] = {"%d","0x%X","0%o"};
  size_t curr_radix = 0;
 const char *set_radix(const char *name);
 const char *show_radix();
 const char *get_radix();
 %}
%union {
  struct calcval val;   /* For returning numbers.  */
  struct symrec  *tptr;   /* For returning symbol-table pointers.  */
}
%token <val>  NUM        /* Simple double precision number.  */
%token <tptr> VAR FNCT 
%token IMAG EXIT COPYRIGHT HELP RADIX
%type  <val>  exp
%left ANS
%right '='
%left '-' '+'
%left '*' '/'
%left NEG     /* negation--unary minus */
%right '^'    /* exponentiation */

%% /* The grammar follows.  */
input:   input stmt
        | /* NULL */
     ;
     
     stmt:
               ';'
       	       | COPYRIGHT ';' {print_copyright();if(PHYSCALC_is_interactive)printf("%s",PROMPT_STRING);}
               | HELP '(' FNCT ')' ';' {print_help($3->name);if(PHYSCALC_is_interactive)printf("%s",PROMPT_STRING);}
               | HELP '(' RADIX ')' ';' {print_help("radix");if(PHYSCALC_is_interactive)printf("%s",PROMPT_STRING);}
               | RADIX '(' VAR ')' ';' {set_radix($3->name);if(PHYSCALC_is_interactive)printf("%s",PROMPT_STRING);}
               | RADIX '(' ')' ';' {printf("%s\n",show_radix());if(PHYSCALC_is_interactive)printf("%s",PROMPT_STRING);}
               | HELP ';' {print_help(NULL);if(PHYSCALC_is_interactive)printf("%s",PROMPT_STRING);}
               | EXIT ';' {YYACCEPT;}
               | exp ';'   { print_complex($1); PHYSCALC_ans = $1;}
               | error ';' { yyerrok; if(PHYSCALC_is_interactive) printf("%s",PROMPT_STRING);         }
               ;

exp:          NUM                 { $$ = $1;yylval.val = $1;}
             | NUM IMAG { yylval.val.re = 0;yylval.val.im = $1.re;$$ = yylval.val;}
             | VAR                { $$.re = $1->value.var[0];$$.im = $1->value.var[1];}
             | ANS                { $$ = PHYSCALC_ans;             } 
             | VAR '=' exp        { $$ = $3; $1->value.var[0] = $3.re;$1->value.var[1]= $3.im; }
	| FNCT '(' ')' {do_funct($1,&PHYSCALC_ans); $$ = PHYSCALC_ans;}
             | FNCT '(' VAR ')'   {  do_funct($1,$3,&PHYSCALC_ans);$$ = PHYSCALC_ans;}
             | FNCT '(' exp ')'   { do_funct($1,$3,&PHYSCALC_ans); $$ = PHYSCALC_ans;}
             | FNCT '(' VAR ',' VAR ')' { do_funct2($1, $3, $5,&PHYSCALC_ans); $$ = PHYSCALC_ans;}
             | exp '+' exp        { $$.re = $1.re + $3.re;$$.im = $1.im+$3.im;}
             | exp '-' exp        { $$.re = $1.re - $3.re;$$.im = $1.im-$3.im;}
             | exp '*' exp        { $$.re = $1.re * $3.re-$1.im*$3.im;$$.im = $1.re*$3.im+$1.im*$3.re;}
             | exp '/' exp        { $$.re = $1.re / $3.re; $$.im = $1.im/$3.re;}
             | exp '%' exp        { $$.re = (int)$1.re % (int)$3.re;}
             | '-' exp  %prec NEG { $$.re = -$2.re;$$.im = -$2.im;         }
             | exp '^' exp        { $$.re = pow ($1.re, $3.re);$$.im=0; }
             | '(' exp ')'        { $$ = $2;                         }
             | VAR '[' exp ',' exp ']' {handle_plane($1,$3.re,$5.re,&PHYSCALC_ans);$$ = PHYSCALC_ans;} 
            ;
     /* End of grammar.  */
%%

symrec *
     putsym (char const *sym_name, int sym_type)
     {
       symrec *ptr;
       ptr = (symrec *) malloc (sizeof (symrec));
       ptr->name = (char *) malloc (strlen (sym_name) + 1);
       strcpy (ptr->name,sym_name);
       ptr->type = sym_type;
       ptr->isPlaneFunction = false;
       ptr->value.var[0] = 0; /* Set value to 0 even if fctn.  */
       ptr->value.var[1] = 0;
       ptr->next = (struct symrec *)sym_table;
       sym_table = ptr;
       return ptr;
     }
     
     symrec *
     getsym (char const *sym_name)
     {
       symrec *ptr;
       for (ptr = sym_table; ptr != (symrec *) 0;
            ptr = (symrec *)ptr->next)
         if (strcmp (ptr->name,sym_name) == 0)
           return ptr;
       return 0;
     }

#if 0
#include <ctype.h>

     int
     yylex (void)
     {
       int c;

       /* Ignore white space, get first nonwhite character.  */
       while ((c = getchar ()) == ' ' || c == '\t');
     
       if (c == EOF)
         return 0;
     
       /* Char starts a number => parse the number.         */
       if (c == '.' || isdigit (c))
         {
           ungetc (c, stdin);
           scanf ("%lf", &yylval.val[0]);
           return NUM;
         }
     
       /* Char starts an identifier => read the name.       */
       if (isalpha (c))
         {
           symrec *s;
           static char *symbuf = 0;
           static int length = 0;
           int i;
     
           /* Initially make the buffer long enough
              for a 40-character symbol name.  */
           if (length == 0)
             length = 40, symbuf = (char *)malloc (length + 1);
     
           i = 0;
           do
             {
               /* If buffer is full, make it bigger.        */
               if (i == length)
                 {
                   length *= 2;
                   symbuf = (char *) realloc (symbuf, length + 1);
                 }
               /* Add this character to the buffer.         */
               symbuf[i++] = c;
               /* Get another character.                    */
               c = getchar ();
             }
           while (isalnum (c));
     
           ungetc (c, stdin);
           symbuf[i] = '\0';
     
           s = getsym (symbuf);
           if (s == 0)
             s = putsym (symbuf, VAR);
           yylval.tptr = s;
           return s->type;
         }
     
       /* Any other character is a token by itself.        */
       return c;
     }
#endif

/* Called by yyparse on error.  */
     void
     yyerror (char const *s)
     {
       printf ("%s: %s\n", s,yytext);
     }

const char *set_radix(const char *name)
{
  if(name == NULL)
    return radices[curr_radix];
  if(strncmp(name,"dec",strlen("dec")) == 0)
    return radices[curr_radix = 0];
  if(strncmp(name,"hex",strlen("hex")) == 0)
    return radices[curr_radix = 1];
  if(strncmp(name,"oct",strlen("oct")) == 0)
    return radices[curr_radix = 2];
  return radices[curr_radix];
}

const char *get_radix(){return radices[curr_radix];}

const char *show_radix()
{
  switch(curr_radix)
    {
    case 0:
      return "dec";
    case 1:
      return "hex";
    case 2:
      return "oct";
    default:
      curr_radix = 0;
      break;
    }
  return "dec";
}

     

